var $screen = screen(6,0)
var $pivot_io = 1
var $orescanner_io = 3
var $terrainscanner_io = 0

var $bufferscreen = screen(6,2)
var $coordscreen = screen(6,1)


var $radius = 6400000
var $ranges = 100
var $stepsize = 80000
var $offsetx : number
var $offsety : number
var $scale : number
var $distancefromcam = 18000000

var $A = 0
var $B = 0
var $C = 0

var $buffer = 0

var $x : number
var $y : number
var $z : number

var $xp : number
var $yp : number
var $zp = 200
var $ooz : number

var $i : number
var $j : number
var $k : number

var $opacity = 255
var $dot = color(255,255,255,255)

array $longitudes : number
array $latitudes : number

array $heightmap : number

function @setresolution()
	$stepsize = pi * $radius / $ranges

function @setradarsize()
	$scale = 1
function @setscreen()
	$offsetx = $screen.width / 2
	$offsety = $screen.height / 2



		


function @calculateijk($lon:number , $lat:number)
	$i = $radius * sin(-$lon) * cos($lat)
	$j = $radius * sin($lat)
	$k = $radius * cos($lat) * cos(-$lon)


function @calculatexyz($u:text)
	$x = $scale *  $j * sin($A) * sin($B) * cos($C) - $k * cos($A) * sin($B) * cos($C) + $j * cos($A) * sin($C) + $k * sin($A) * sin($C) + $i * cos($B) * cos($C)
	$y = $scale * $j * cos($A) * cos($C) + $k * sin($A) * cos($C) - $j * sin($A) * sin($B) * sin($C) + $k * cos($A) * sin($B) * sin($C) - $i * cos($B) * sin($C)
	$z = $distancefromcam + $scale * $k * cos($A) * cos($B) - $j * sin($A) * cos($B) + $i * sin($B)
	
	
function @calculateprojection()
	$ooz = 1 / ($z) 
	$yp = $offsety + $scale *$y * $zp * $ooz
	$xp = $offsetx + $scale *$x * $zp * $ooz


function @terrainscanning ($r:number)
	repeat $r ($n)
		var $arclength = $stepsize * ($n+1)
		print($arclength)
		output_number($terrainscanner_io,$n, ($n+1)*$stepsize)
		var $terraindata = input_text($terrainscanner_io,$n)
		var $lat = $arclength * cos(input_number($pivot_io,0)* 2 * pi) / 6400000
		var $lon = $arclength * sin(input_number($pivot_io,0)* 2 * pi) / 6400000
		@calculateprojection($lon,$lat)
		var $terraindot = color(0,255,0, clamp(abs($terraindata) / 3000 * 255, 0 , $opacity))
		if $terraindata < 0
			$terraindot = color(0,0,255, clamp(abs($terraindata) / 3000 * 255, 0 , $opacity))
		if $terraindata >= 0
			$terraindot = color(0,255,0, clamp(abs($terraindata) / 3000 * 255, 0 , $opacity))
		$screen.draw_point($xp, $yp, black)
		$screen.draw_point($xp, $yp, $terraindot)

function @convertrad($angle:number) : number
	return $angle * 2pi / 360

function @generatecoordmap()
	for -90,90 ($p)
		for -9,9 ($s)
			var $radp = @convertrad($p) * 2
			var $rads = @convertrad($s) * 10
			#var $coordcolor = color(($radp + pi) / 2pi * 255,0,(1 - ($radp + pi) / 2pi) * 255,255)
			var $coordcolor = color(50,50,50,255)
			$coordscreen.draw_point($p*2+180,$s*10+90,$coordcolor)

function @updatebuffer($p:number,$s:number)
	var $scaleooz = $z /($distancefromcam + $radius)
	print($scaleooz *255)
	if $ooz*255*$distancefromcam/2 > color_r($bufferscreen.pixel($xp,$yp))
		$bufferscreen.draw_point($xp,$yp,black)
		$bufferscreen.draw_point($xp,$yp,color($scaleooz*255,0,0,255))
		$screen.draw_circle($xp,$yp,1,$coordscreen.pixel($p+180,$s+90))

#	print(color_r($coordscreen.pixel($p*10+180,$s*10+90)))

function @drawfrommap()
	$screen.blank()
	$coordscreen.text_size(10)
	$coordscreen.write(20,60,white,"TEST")
	$bufferscreen.blank()

	for -90,90 ($p)
		for -9,9 ($s)
			var $radp = @convertrad($p) * 2
			var $rads = @convertrad($s) * 10
			@calculateijk($radp,$rads)
			@calculatexyz()
			@calculateprojection()
			@updatebuffer($p*2,$s*10)
	$A = $a + 0.005
	$B = $b - 0.01
	$C = $C + 0.01
